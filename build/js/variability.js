"use strict";var width=300,height=200,marginBottom=50,chartColor="rgb(66, 170, 143)",font="Didact Gothic",fontSize="10",bgcolor="white",loading=0;
"use strict";function drawCharts(t){drawPriceChart(setDate(t,"ether"),"#ether",width,height,"Euro"),drawPriceChart(setDate(t,"bitcoin"),"#bitcoin",width,height,"$"),drawPriceChart(setDate(t,"litecoin"),"#litecoin",width,height,"Euro"),drawVarPriceChart(setDate(t,"ether"),"#ether-var",width,height,"Euro"),drawVarPriceChart(setDate(t,"bitcoin"),"#bitcoin-var",width,height,"$"),drawVarPriceChart(setDate(t,"litecoin"),"#litecoin-var",width,height,"Euro")}function year(){loading=0,drawCharts(setDateScope(12))}function half(){loading=0,drawCharts(setDateScope(6))}function quater(){loading=0,drawCharts(setDateScope(3))}function month(){loading=0,drawCharts(setDateScope(1))}function alldata(){loading=0,drawCharts("2017-06-01")}alldata();
"use strict";function drawPriceChart(t,e,n,r,a){queue().defer(d3.csv,t).await(function(t,o){loading++,progress(loading),console.log(loading),t&&console.log(t);var i,l,c,s,g=e.substr(1);g.toString(),document.getElementById(g).innerHTML="<p>".concat(o[0].High," ").concat(a," </p>"),i=d3.max(o,function(t){return+t.High}),l=d3.min(o,function(t){return+t.High}),c=d3.min(o,function(t){return t.Date}),s=d3.max(o,function(t){return t.Date});var d=d3.time.scale().domain([new Date(c),new Date(s)]).range([10,n-41]),u=d3.svg.axis().scale(d),f=d3.scale.linear().domain([0,i-l]).range([0,r-10-marginBottom]);if(h){var m=h.select(e);m.exit().remove(),console.log("there is svg")}var h=d3.select(e).append("svg").attr("width",n).attr("height",r).style("background-color",bgcolor);d3.transition().duration(4500);console.log(o.length),h.selectAll("rect").data(o).enter().append("rect").attr("x",function(t,e){return n-n/o.length-e*((n-50)/o.length)}).attr("y",function(t){return r-marginBottom-f(t.High-l)}).attr("height",function(t){return f(t.High-l)}).attr("width",function(t){return n/o.length}).style("fill","white").append("svg:title").text(function(t){return"Date: ".concat(t.Date," Price: ").concat(t.High)}).append("g"),h.selectAll("rect").transition().duration(1500).style("fill",chartColor),h.selectAll("text").data(o).enter().append("text").text(function(t,e){return parseInt(l+.1*e*(i-l))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,e){return r-marginBottom-fontSize+parseInt(fontSize)-e*((r-marginBottom-fontSize)/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black");var p=r-marginBottom;h.append("g").attr("class","x axis").attr("transform","translate(40,"+p+")").call(u).selectAll("text").attr("y",0).attr("x",9).attr("dy",".35em").attr("transform","rotate(90)").attr("font-size",fontSize).style("text-anchor","start")})}
"use strict";function drawVarPriceChart(t,n,e,r,a){queue().defer(d3.csv,t).await(function(t,o){loading++,progress(loading),console.log(loading),t&&console.log(t);var i,c,l,d,s=n.substr(1);s.toString(),document.getElementById(s).innerHTML="<p>".concat(o[0].Open," ").concat(a," </p>"),i=d3.max(o,function(t){return+t.High-t.Low}),c=d3.min(o,function(t){return+t.High-t.Low});var u=d3.mean(o,function(t){return+t.High-t.Low});l=d3.min(o,function(t){return t.Date}),d=d3.max(o,function(t){return t.Date}),u=u.toFixed(0),i=i.toFixed(0),document.getElementById(s).innerHTML=" <p> Max: ".concat(i," Average: ").concat(u," ").concat(a," </p>");var g=d3.time.scale().domain([new Date(l),new Date(d)]).range([10,e-41]),f=d3.svg.axis().scale(g),m=d3.scale.linear().domain([0,i-c]).range([0,r-10-marginBottom]),h=d3.select(n).append("svg").attr("width",e).attr("height",r).style("background-color",bgcolor);h.selectAll("rect").data(o).enter().append("rect").attr("x",function(t,n){return e+0-e/o.length-n*((e-50)/o.length)}).attr("y",function(t){return r-marginBottom-m(t.High-t.Low)}).attr("height",function(t){return m(t.High-t.Low)}).attr("width",function(t){return e/o.length}).style("fill","white"),h.selectAll("rect").transition().duration(1500).style("fill",chartColor).transition().duration(3e3).style("fill",function(t){return t.High-t.Low>u?"orange":chartColor}),h.selectAll("text").data(o).enter().append("text").text(function(t,n){return parseInt(c+.1*n*(i-c))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,n){return r-marginBottom-n*((r-marginBottom-fontSize)/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black");var x=r-marginBottom;h.append("g").attr("class","x axis").attr("transform","translate(40,"+x+")").call(f).selectAll("text").attr("y",0).attr("x",9).attr("dy",".35em").attr("transform","rotate(90)").attr("font-size",fontSize).style("text-anchor","start")})}
"use strict";function progress(e){document.getElementById("progress").innerHTML="Loading data: "+(e/6*100).toFixed(0)+"%",document.getElementById("progress").style.width=e/6*100+"%",document.getElementById("progress-bar").style.display=6==e||0==e?"none":"block"}
"use strict";function setDateScope(t){var a=new Date;return a.setMonth(a.getMonth()-t),a.toISOString().slice(0,10)}function setDate(t,a){var e="&start_date="+t;return"bitcoin"==a?"https://www.quandl.com/api/v3/datasets/BITSTAMP/USD.csv?api_key=fzanZC3297Jsid-E8vCF"+e:"ether"==a?"https://www.quandl.com/api/v3/datasets/GDAX/ETH_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+e:"litecoin"==a?"https://www.quandl.com/api/v3/datasets/GDAX/LTC_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+e:void 0}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0LXNldHRpbmdzLWFuZC1kYXRhLmpzIiwiZHJhdy1jaGFydC5qcyIsImZ1bmN0aW9ucy9kcmF3UHJpY2VDaGFydC5qcyIsImZ1bmN0aW9ucy9kcmF3VmFyUHJpY2VDaGFydC5qcyIsImZ1bmN0aW9ucy9wcm9ncmVzcy5qcyIsImZ1bmN0aW9ucy9zZXREYXRlLmpzIl0sIm5hbWVzIjpbIndpZHRoIiwiaGVpZ2h0IiwibWFyZ2luQm90dG9tIiwiY2hhcnRDb2xvciIsImZvbnQiLCJmb250U2l6ZSIsImRyYXdDaGFydHMiLCJkYXRlIiwiZHJhd1ByaWNlQ2hhcnQiLCJzZXREYXRlIiwiZHJhd1ZhclByaWNlQ2hhcnQiLCJsb2FkaW5nIiwieWVhciIsInNldERhdGVTY29wZSIsImhhbGYiLCJxdWF0ZXIiLCJhbGxkYXRhIiwiZGF0YSIsImlkIiwiY3VycmVuY3kiLCJxdWV1ZSIsImRlZmVyIiwiZDMiLCJjc3YiLCJhd2FpdCIsInByb2dyZXNzIiwiZXJyb3IiLCJ0cmFuc2FjdGlvbnNEYXRhIiwiY29uc29sZSIsImxvZyIsImRvY3VtZW50IiwibWF4IiwibWluIiwiZmlyc3REYXRlIiwiYSIsInN1YnN0ciIsInRvU3RyaW5nIiwiaW5uZXJIVE1MIiwiY29uY2F0IiwiSGlnaCIsImQiLCJEYXRlIiwidGltZSIsImRvbWFpbiIsImxhc3REYXRlIiwicmFuZ2UiLCJ4QXhpcyIsInN2ZyIsImF4aXMiLCJzY2FsZSIsIngiLCJsaW5lYXIiLCJwYXRoIiwicmVtb3ZlIiwic2VsZWN0IiwiYXBwZW5kIiwiYXR0ciIsInN0eWxlIiwiYmdjb2xvciIsInRyYW5zaXRpb24iLCJsZW5ndGgiLCJzZWxlY3RBbGwiLCJpIiwicGFyc2VJbnQiLCJkdXJhdGlvbiIsImVudGVyIiwidGV4dCIsInRtcCIsImNhbGwiLCJnZXRFbGVtZW50QnlJZCIsIk9wZW4iLCJMb3ciLCJhdmciLCJtZWFuIiwidG9GaXhlZCIsImRpc3BsYXkiLCJwZXJpb2QiLCJzZXRNb250aCIsInNsaWNl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Q25GbUQsS0FBSyxjQUFlcEQsTUFDcEJvRCxLQUFLLFlBQWFuRCxVQUNsQm1ELEtBQUssT0FBUSxTQUtYLElBQUlXLEVBQUlsRSxFQUFPQyxhQUVmNkMsRUFBSVEsT0FBTyxLQUNYQyxLQUFLLFFBQVMsVUFDZEEsS0FBSyxZQUFhLGdCQUFrQlcsRUFBTSxLQUMxQ0MsS0FBS3RCLEdBQ0xlLFVBQVUsUUFDVkwsS0FBSyxJQUFLLEdBQ1ZBLEtBQUssSUFBSyxHQUNWQSxLQUFLLEtBQU0sU0FDWEEsS0FBSyxZQUFhLGNBQ2xCQSxLQUFLLFlBQWFuRCxVQUNsQm9ELE1BQU0sY0FBZTthQ2pIOUIsU0FBU2hDLFNBQVNkLEdBR1ZtQixTQUFTdUMsZUFBZSxZQUFZaEMsVUFBWSxrQkFBb0IxQixFQUFVLEVBQUEsS0FBSytELFFBQW5DLEdBQWhELElBQ0E1QyxTQUFTdUMsZUFBZSxZQUFrQnJFLE1BQTFDQSxNQUFrRFcsRUFBVyxFQUFaLElBQWpELElBQ0lBLFNBQUEwRCxlQUEyQixnQkFBQVosTUFBQWtCLFFBQWxCLEdBQVRoRSxHQUF1QixHQUFUQSxFQUFhLE9BRXhCO2FDUGYsU0FBU0UsYUFBYStELEdBQ2xCLElBQUlwQyxFQUFJLElBQUlDLEtBRVZvQyxPQUZGckMsRUFBSUEsU0FBUUMsRUFBQUEsV0FBWm1DLEdBRUVDLEVBQVNyQyxjQUFBc0MsTUFBZUYsRUFBMUIsSUFLSixTQUFTbkUsUUFBUUYsRUFBTXdFLEdBSW5CLElBQUlDLEVBQUFBLGVBQWlCekUsRUFPcEIsTUFBQSxXQUFBd0UsRUFMb0IsdUZBQUNFLEVBR1osU0FBTkYsRUFESix1RkFBcUJFLEVBRVgsWUFBTkYsRUFEZSx1RkFBQUUsT0FDbkIiLCJmaWxlIjoidmFyaWFiaWxpdHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGphdmFzY3JpcHQgZmlsZSBpcyBsb2FkZWQgZmlyc3QuXG4vLyBDaGFydHMgY29uZmlnXG5jb25zdCB3aWR0aCA9IDMwMDtcbmNvbnN0IGhlaWdodCA9IDIwMDtcbmNvbnN0IG1hcmdpbkJvdHRvbT01MDtcbmNvbnN0IGNoYXJ0Q29sb3I9J3JnYig2NiwgMTcwLCAxNDMpJztcbmNvbnN0IGZvbnQgPSAnRGlkYWN0IEdvdGhpYyc7XG5jb25zdCBmb250U2l6ZSA9ICcxMCc7XG5jb25zdCBiZ2NvbG9yPSd3aGl0ZSc7XG5sZXQgbG9hZGluZz0wO1xuIiwiLy8gVGhpcyBqYXZhc2NyaXB0IGZpbGUgaXMgbGFzdC5cblxuZnVuY3Rpb24gZHJhd0NoYXJ0cyhkYXRlKSB7XG5kcmF3UHJpY2VDaGFydChzZXREYXRlKGRhdGUsJ2V0aGVyJyksJyNldGhlcicsd2lkdGgsaGVpZ2h0LCBcIkV1cm9cIik7XG5kcmF3UHJpY2VDaGFydChzZXREYXRlKGRhdGUsJ2JpdGNvaW4nKSwnI2JpdGNvaW4nLHdpZHRoLGhlaWdodCwgXCIkXCIpO1xuZHJhd1ByaWNlQ2hhcnQoc2V0RGF0ZShkYXRlLCdsaXRlY29pbicpLCcjbGl0ZWNvaW4nLHdpZHRoLGhlaWdodCwgXCJFdXJvXCIpO1xuXG5kcmF3VmFyUHJpY2VDaGFydChzZXREYXRlKGRhdGUsJ2V0aGVyJyksJyNldGhlci12YXInLHdpZHRoLGhlaWdodCwgXCJFdXJvXCIpO1xuZHJhd1ZhclByaWNlQ2hhcnQoc2V0RGF0ZShkYXRlLCdiaXRjb2luJyksJyNiaXRjb2luLXZhcicsd2lkdGgsaGVpZ2h0LCBcIiRcIik7XG5kcmF3VmFyUHJpY2VDaGFydChzZXREYXRlKGRhdGUsJ2xpdGVjb2luJyksJyNsaXRlY29pbi12YXInLHdpZHRoLGhlaWdodCwgXCJFdXJvXCIpO1xufVxuXG5cbmZ1bmN0aW9uIHllYXIoKSB7ICAgIFxuICBsb2FkaW5nPTA7XG4gIGRyYXdDaGFydHMoc2V0RGF0ZVNjb3BlKDEyKSk7IFxufVxuXG5mdW5jdGlvbiBoYWxmKCkgeyAgICBcbiAgICBsb2FkaW5nPTA7XG4gICAgZHJhd0NoYXJ0cyhzZXREYXRlU2NvcGUoNikpOyBcbiAgfVxuXG5mdW5jdGlvbiBxdWF0ZXIoKSB7ICAgIFxuICAgIGxvYWRpbmc9MDtcbiAgICBkcmF3Q2hhcnRzKHNldERhdGVTY29wZSgzKSk7IFxuICB9XG5cbiBcbmZ1bmN0aW9uIG1vbnRoKCkgeyBcbiAgbG9hZGluZz0wO1xuICBkcmF3Q2hhcnRzKHNldERhdGVTY29wZSgxKSk7IFxuICB9XG5cblxuZnVuY3Rpb24gYWxsZGF0YSgpIHtcbiAgIGxvYWRpbmc9MDtcbiAgICBkcmF3Q2hhcnRzKCcyMDE3LTA2LTAxJyk7XG59XG5cblxuXG5hbGxkYXRhKCk7XG4iLCIvLyBQcmljZVxuXG5mdW5jdGlvbiBkcmF3UHJpY2VDaGFydChkYXRhLCBpZCwgd2lkdGgsIGhlaWdodCwgY3VycmVuY3kpIHtcblxuICBxdWV1ZSgpXG4gICAgLmRlZmVyKGQzLmNzdiwgZGF0YSlcbiAgICAuYXdhaXQobWFrZUdyYXBocyk7XG5cbiAgZnVuY3Rpb24gbWFrZUdyYXBocyhlcnJvciwgdHJhbnNhY3Rpb25zRGF0YSkge1xuICAgIGxvYWRpbmcrKztcbiAgICBwcm9ncmVzcyhsb2FkaW5nKVxuICAgIGNvbnNvbGUubG9nKGxvYWRpbmcpXG4gICAgaWYgKGVycm9yKSB7IGNvbnNvbGUubG9nKGVycm9yKTsgfVxuICAgIGNvbnN0IGEgPSBpZC5zdWJzdHIoMSk7XG4gICAgYS50b1N0cmluZygpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpLmlubmVySFRNTCA9IGA8cD4ke3RyYW5zYWN0aW9uc0RhdGFbMF0uSGlnaH0gJHtjdXJyZW5jeX0gPC9wPmA7XG5cbiAgICBsZXQgbWF4OyBcbiAgICBsZXQgbWluO1xuICAgIGxldCBmaXJzdERhdGU7XG4gICAgbGV0IGxhc3REYXRlO1xuXG4gICAgbWF4ID0gZDMubWF4KHRyYW5zYWN0aW9uc0RhdGEsIGQgPT4gK2QuSGlnaCk7XG4gICAgbWluID0gZDMubWluKHRyYW5zYWN0aW9uc0RhdGEsIGQgPT4gK2QuSGlnaCk7XG4gICAgZmlyc3REYXRlID0gZDMubWluKHRyYW5zYWN0aW9uc0RhdGEsIGQgPT4gZC5EYXRlKTtcbiAgICBsYXN0RGF0ZSA9IGQzLm1heCh0cmFuc2FjdGlvbnNEYXRhLCBkID0+IGQuRGF0ZSk7XG4gICAgXG4gICAgXG4gICAgbGV0IHggPSBkMy50aW1lLnNjYWxlKClcbiAgICAgIC5kb21haW4oW25ldyBEYXRlKGZpcnN0RGF0ZSksIG5ldyBEYXRlKGxhc3REYXRlKV0pXG4gICAgICAucmFuZ2UoWzEwLCB3aWR0aC00MV0pOyAgIC8vIExlZnQgcmlnaHQgcG9zaXRpb24gZm9yIGRhdGUgY2hhcnRcblxuICAgIGxldCB4QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgIC5zY2FsZSh4KTtcblxuXG4gICAgY29uc3Qgc2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgLmRvbWFpbihbMCwgbWF4IC0gbWluIF0pIC8vIEJvdW5kYXJpZXMgZm9yIGNoYXJ0XG4gICAgICAucmFuZ2UoWzAsIGhlaWdodCAtIDEwIC0gbWFyZ2luQm90dG9tXSk7IC8vIGJvdW5kYXJpZXMgZm9yIGRhdGFcblxuXG4gICAgICBpZiAoc3ZnKSB7XG4gICAgICB2YXIgcGF0aCA9IHN2Zy5zZWxlY3QoaWQpXG4gICAgICBwYXRoLmV4aXQoKS5yZW1vdmUoKVxuICAgICAgY29uc29sZS5sb2coJ3RoZXJlIGlzIHN2ZycpXG4gICAgfVxuICAgICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KGlkKVxuICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGJnY29sb3IpXG4gICAgICAvLyAuY2FsbChkMy5iZWhhdmlvci56b29tKCkub24oXCJ6b29tXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vICAgc3ZnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBkMy5ldmVudC50cmFuc2xhdGUgKyBcIilcIiArIFwiIHNjYWxlKFwiICsgZDMuZXZlbnQuc2NhbGUgKyBcIilcIilcbiAgICAgIC8vIH0pKVxuICAgICAgLy8uYXBwZW5kKFwiZ1wiKVxuICAgICAgbGV0IHQ9ZDNcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbig0NTAwKVxuXG5cbiAgICAgIGNvbnNvbGUubG9nKHRyYW5zYWN0aW9uc0RhdGEubGVuZ3RoKVxuICAgXG4gICAgLy8gQmFyc1xuICAgIHN2Zy5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgLmRhdGEodHJhbnNhY3Rpb25zRGF0YSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdyZWN0JykgLy8gYXBwZW5kIHN2ZyB0byBkaXZcbiAgICAgIFxuICAgICAgLmF0dHIoJ3gnLCAoZCwgaSkgPT4gd2lkdGggLSB3aWR0aCAvIHRyYW5zYWN0aW9uc0RhdGEubGVuZ3RoIC0gKGkgKiAoKHdpZHRoIC0gNTApIC8gdHJhbnNhY3Rpb25zRGF0YS5sZW5ndGgpKSlcbiAgICAgIC5hdHRyKCd5JywgZCA9PiBoZWlnaHQgLSBtYXJnaW5Cb3R0b20gLSBzY2FsZShkLkhpZ2ggLSBtaW4pKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gc2NhbGUoZC5IaWdoIC0gbWluKSlcbiAgICAgIC5hdHRyKCd3aWR0aCcsIGQgPT4gd2lkdGggLyB0cmFuc2FjdGlvbnNEYXRhLmxlbmd0aClcbiAgICAgIC5zdHlsZSgnZmlsbCcsICd3aGl0ZScpXG4gICAgICAuYXBwZW5kKCdzdmc6dGl0bGUnKVxuICAgICAgLnRleHQoZCA9PiBgRGF0ZTogJHtkLkRhdGV9IFByaWNlOiAke2QuSGlnaH1gKVxuICAgICAgLmFwcGVuZChcImdcIik7XG4gICBcbiAgICAgIFxuICAgICAgc3ZnLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMTUwMClcbiAgICAgIC5zdHlsZShcImZpbGxcIixjaGFydENvbG9yKTtcbiAgICAgXG4gICAgICBcbiAgICAvLyBQcmljZVxuICAgIHN2Zy5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgLmRhdGEodHJhbnNhY3Rpb25zRGF0YSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC50ZXh0KChkLCBpKSA9PiBwYXJzZUludChtaW4gKyAoKG1heCAtIG1pbikgKiAoaSAqIDAuMSkpKSlcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgLmF0dHIoJ3gnLCAoKSA9PiAyMClcbiAgICAgIC5hdHRyKCd5JywgKGQsIGkpID0+IGhlaWdodC1tYXJnaW5Cb3R0b20tZm9udFNpemUgKyBwYXJzZUludChmb250U2l6ZSkgLSAoaSAqICgoaGVpZ2h0LW1hcmdpbkJvdHRvbS1mb250U2l6ZSkgLyAxMCkpKVxuICAgICAgLmF0dHIoJ2ZvbnQtZmFtaWx5JywgZm9udClcbiAgICAgIC5hdHRyKCdmb250LXNpemUnLCBmb250U2l6ZSlcbiAgICAgIC5hdHRyKCdmaWxsJywgJ2JsYWNrJyk7XG5cbiAgICAgLy8gRGF0ZVxuICAgICAgICAgbGV0IHRtcD1oZWlnaHQtbWFyZ2luQm90dG9tO1xuICAgICAgICAgXG4gICAgICAgICBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDQwLFwiICsgdG1wICsgXCIpXCIpXG4gICAgICAgIC5jYWxsKHhBeGlzKVxuICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIDkpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg5MClcIilcbiAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIGZvbnRTaXplKVxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuXG5cbi8vIC8vIDEuIENyZWF0ZSB0aGUgYnV0dG9uXG4vLyBsZXQgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbi8vIGJ1dHRvbi5pbm5lckhUTUwgPSBcIitcIjtcbi8vIGxldCBidXR0b24yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbi8vIGJ1dHRvbjIuaW5uZXJIVE1MID0gXCItXCI7XG5cbi8vIC8vIDIuIEFwcGVuZCBzb21ld2hlcmVcbi8vIGxldCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYSlcbi8vIGJvZHkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuLy8gYm9keS5hcHBlbmRDaGlsZChidXR0b24yKTtcblxuLy8gLy8gMy4gQWRkIGV2ZW50IGhhbmRsZXJcbi8vIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyIChcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuIFxuLy8gfSk7XG4vLyBidXR0b24yLmFkZEV2ZW50TGlzdGVuZXIgKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4vLyAgIHN0YXJ0RGF0ZT0nJnN0YXJ0X2RhdGU9MjAxOC0wMS0wMSdcblxuLy8gICBzdmcuZXhpdCgpLnJlbW92ZSgpXG5cbi8vIGRyYXdWYXJQcmljZUNoYXJ0KGV0aGVyUHJpY2VEYXRhLCcjZXRoZXItdmFyJyx3aWR0aCxoZWlnaHQpO1xuLy8gZHJhd1ZhclByaWNlQ2hhcnQoYml0Y29pblByaWNlRGF0YSwnI2JpdGNvaW4tdmFyJyx3aWR0aCxoZWlnaHQpO1xuXG4vLyB9KTtcbiAgICAgIFxuICB9XG59XG4iLCIvLyBQcmljZVxuXG5mdW5jdGlvbiBkcmF3VmFyUHJpY2VDaGFydChkYXRhLCBpZCwgd2lkdGgsIGhlaWdodCwgY3VycmVuY3kpIHtcblxuXG5cbiAgcXVldWUoKVxuICAgIC5kZWZlcihkMy5jc3YsIGRhdGEpXG4gICAgLmF3YWl0KG1ha2VHcmFwaHMpO1xuXG4gIGZ1bmN0aW9uIG1ha2VHcmFwaHMoZXJyb3IsIHRyYW5zYWN0aW9uc0RhdGEpIHtcbiAgICBsb2FkaW5nKys7XG4gICAgcHJvZ3Jlc3MobG9hZGluZylcbiAgICBjb25zb2xlLmxvZyhsb2FkaW5nKVxuICAgIGlmIChlcnJvcikgeyBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgXG4gICAgfVxuICAgIGNvbnN0IGEgPSBpZC5zdWJzdHIoMSk7XG4gICAgYS50b1N0cmluZygpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpLmlubmVySFRNTCA9IGA8cD4ke3RyYW5zYWN0aW9uc0RhdGFbMF0uT3Blbn0gJHtjdXJyZW5jeX0gPC9wPmA7XG5cbiAgICBsZXQgbWF4OyBcbiAgICBsZXQgbWluO1xuICAgIGxldCBmaXJzdERhdGU7XG4gICAgbGV0IGxhc3REYXRlO1xuXG4gICAgbWF4ID0gZDMubWF4KHRyYW5zYWN0aW9uc0RhdGEsIGQgPT4gK2QuSGlnaC1kLkxvdyk7XG4gICAgbWluID0gZDMubWluKHRyYW5zYWN0aW9uc0RhdGEsIGQgPT4gK2QuSGlnaC1kLkxvdyk7XG4gICAgbGV0IGF2ZyA9IGQzLm1lYW4odHJhbnNhY3Rpb25zRGF0YSwgZCA9PiArZC5IaWdoIC0gZC5Mb3cpO1xuICAgIGZpcnN0RGF0ZSA9IGQzLm1pbih0cmFuc2FjdGlvbnNEYXRhLCBkID0+IGQuRGF0ZSk7XG4gICAgbGFzdERhdGUgPSBkMy5tYXgodHJhbnNhY3Rpb25zRGF0YSwgZCA9PiBkLkRhdGUpO1xuICAgIFxuXG4gICAgYXZnID0gYXZnLnRvRml4ZWQoMCk7XG4gICAgbWF4ID0gbWF4LnRvRml4ZWQoMCk7XG4gICAgLy9taW4gPSBtaW4udG9GaXhlZCgwKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKS5pbm5lckhUTUwgPSBgIDxwPiBNYXg6ICR7bWF4fSBBdmVyYWdlOiAke2F2Z30gJHtjdXJyZW5jeX0gPC9wPmA7XG4gICAgXG5cbiAgICBsZXQgeCA9IGQzLnRpbWUuc2NhbGUoKVxuICAgICAgLmRvbWFpbihbbmV3IERhdGUoZmlyc3REYXRlKSwgbmV3IERhdGUobGFzdERhdGUpXSlcbiAgICAgIC5yYW5nZShbMTAsIHdpZHRoLTQxXSk7ICAgLy8gTGVmdCByaWdodCBwb3NpdGlvbiBmb3IgZGF0ZSBjaGFydFxuXG4gICAgbGV0IHhBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgLnNjYWxlKHgpO1xuXG5cbiAgICBjb25zdCBzY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAuZG9tYWluKFswLCBtYXggLSBtaW4gXSkgLy8gQm91bmRhcmllcyBmb3IgY2hhcnRcbiAgICAgIC5yYW5nZShbMCwgaGVpZ2h0IC0gMTAgLSBtYXJnaW5Cb3R0b21dKTsgLy8gYm91bmRhcmllcyBmb3IgZGF0YVxuXG4gICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KGlkKVxuICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGJnY29sb3IpO1xuXG5cbiAgICBzdmcuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAgIC5kYXRhKHRyYW5zYWN0aW9uc0RhdGEpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncmVjdCcpIC8vIGFwcGVuZCBzdmcgdG8gZGl2XG4gICAgICAuYXR0cigneCcsIChkLCBpKSA9PiB3aWR0aCArIDAgLSB3aWR0aCAvIHRyYW5zYWN0aW9uc0RhdGEubGVuZ3RoIC0gKGkgKiAoKHdpZHRoIC0gNTApIC8gdHJhbnNhY3Rpb25zRGF0YS5sZW5ndGgpKSlcbiAgICAgIC5hdHRyKCd5JywgZCA9PiBoZWlnaHQgLSBtYXJnaW5Cb3R0b20gLSBzY2FsZShkLkhpZ2ggLSBkLkxvdykpXG4gICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiBzY2FsZShkLkhpZ2ggLSBkLkxvdykpXG4gICAgICAuYXR0cignd2lkdGgnLCBkID0+IHdpZHRoIC8gdHJhbnNhY3Rpb25zRGF0YS5sZW5ndGgpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnd2hpdGUnKVxuICAgICBcblxuICAgICBcbiAgICBzdmcuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAudHJhbnNpdGlvbigpXG4gICAgLmR1cmF0aW9uKDE1MDApXG4gICAgLnN0eWxlKFwiZmlsbFwiLGNoYXJ0Q29sb3IpXG4gICAgLnRyYW5zaXRpb24oKVxuICAgIC5kdXJhdGlvbigzMDAwKVxuICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICBpZiAoZC5IaWdoLWQuTG93ID4gYXZnKSB7ICAgLy9UaHJlc2hvbGQgb2YgMTVcbiAgICAgICAgICByZXR1cm4gXCJvcmFuZ2VcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNoYXJ0Q29sb3I7XG4gICAgICB9XG4gIH0pXG5cblxuICAgIC8vIFByaWNlXG4gICAgc3ZnLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAuZGF0YSh0cmFuc2FjdGlvbnNEYXRhKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLnRleHQoKGQsIGkpID0+IHBhcnNlSW50KG1pbiArICgobWF4IC0gbWluKSAqIChpICogMC4xKSkpKVxuICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAuYXR0cigneCcsICgpID0+IDIwKVxuICAgICAgLmF0dHIoJ3knLCAoZCwgaSkgPT4gaGVpZ2h0IC0gbWFyZ2luQm90dG9tIC0gKGkgKiAoKGhlaWdodC1tYXJnaW5Cb3R0b20tZm9udFNpemUpIC8gMTApKSlcbiAgICAgIC5hdHRyKCdmb250LWZhbWlseScsIGZvbnQpXG4gICAgICAuYXR0cignZm9udC1zaXplJywgZm9udFNpemUpXG4gICAgICAuYXR0cignZmlsbCcsICdibGFjaycpO1xuXG4gICAgICBcblxuICAgICAvLyBEYXRlXG4gICAgICAgICBsZXQgdG1wPWhlaWdodC1tYXJnaW5Cb3R0b207XG4gICAgICAgICBcbiAgICAgICAgIHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoNDAsXCIgKyB0bXAgKyBcIilcIilcbiAgICAgICAgLmNhbGwoeEF4aXMpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKDkwKVwiKVxuICAgICAgICAuYXR0cignZm9udC1zaXplJywgZm9udFNpemUpXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG5cblxuXG4gIH1cbn1cblxuXG4iLCJmdW5jdGlvbiBwcm9ncmVzcyhsb2FkaW5nKSB7XG5cbiAgICBcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9ncmVzc1wiKS5pbm5lckhUTUwgPSBcIkxvYWRpbmcgZGF0YTogXCIgKyAobG9hZGluZy82KjEwMCkudG9GaXhlZCgwKSAgKyBcIiVcIlxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2dyZXNzXCIpLnN0eWxlLndpZHRoPSAobG9hZGluZy82KSoxMDAgKyBcIiVcIjtcbiAgICAgICAgaWYgKGxvYWRpbmc9PTYgfHwgbG9hZGluZz09MCApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvZ3Jlc3MtYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2dyZXNzLWJhclwiKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJyAgICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICBcbn0iLCJmdW5jdGlvbiBzZXREYXRlU2NvcGUocGVyaW9kKSB7XG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpXG5cbiAgICBkLnNldE1vbnRoKGQuZ2V0TW9udGgoKSAtIHBlcmlvZCk7XG4gICAgcmV0dXJuIGQudG9JU09TdHJpbmcoKS5zbGljZSgwLDEwKTtcbn1cblxuXG5mdW5jdGlvbiBzZXREYXRlKGRhdGUsIHR5cGUpIHtcbiAgICBcbiAgICBsZXQgc3RhcnREYXRlPScmc3RhcnRfZGF0ZT0nK2RhdGVcbiAgICBcbiAgICBsZXQgYml0Y29pblByaWNlRGF0YT0naHR0cHM6Ly93d3cucXVhbmRsLmNvbS9hcGkvdjMvZGF0YXNldHMvQklUU1RBTVAvVVNELmNzdj9hcGlfa2V5PWZ6YW5aQzMyOTdKc2lkLUU4dkNGJytzdGFydERhdGU7XG4gICAgbGV0IGV0aGVyUHJpY2VEYXRhPSdodHRwczovL3d3dy5xdWFuZGwuY29tL2FwaS92My9kYXRhc2V0cy9HREFYL0VUSF9FVVIuY3N2P2FwaV9rZXk9ZnphblpDMzI5N0pzaWQtRTh2Q0YnK3N0YXJ0RGF0ZTtcbiAgICBsZXQgbGl0ZWNvaW5QcmljZURhdGE9J2h0dHBzOi8vd3d3LnF1YW5kbC5jb20vYXBpL3YzL2RhdGFzZXRzL0dEQVgvTFRDX0VVUi5jc3Y/YXBpX2tleT1memFuWkMzMjk3SnNpZC1FOHZDRicrc3RhcnREYXRlO1xuICAgIFxuICAgIGlmICh0eXBlPT0nYml0Y29pbicpIHJldHVybiBiaXRjb2luUHJpY2VEYXRhXG4gICAgaWYgKHR5cGU9PSdldGhlcicpIHJldHVybiBldGhlclByaWNlRGF0YVxuICAgIGlmICh0eXBlPT0nbGl0ZWNvaW4nKSByZXR1cm4gbGl0ZWNvaW5QcmljZURhdGFcbiAgICB9Il19
