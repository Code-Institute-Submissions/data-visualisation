"use strict";var width=340,height=280,marginBottom=50,chartColor="rgb(66, 170, 143)",font="Didact Gothic",fontSize="12",bgcolor="white",loading=0;
"use strict";navigator.onLine||alert("This website need to be connected to internet in order to work properly");
"use strict";function drawCharts(t){drawPriceChart(setDate(t,"ether"),"#ether",width,height,"€"),drawPriceChart(setDate(t,"bitcoin"),"#bitcoin",width,height,"$"),drawPriceChart(setDate(t,"litecoin"),"#litecoin",width,height,"€"),drawVarPriceChart(setDate(t,"ether"),"#ether-var",width,height,"€"),drawVarPriceChart(setDate(t,"bitcoin"),"#bitcoin-var",width,height,"$"),drawVarPriceChart(setDate(t,"litecoin"),"#litecoin-var",width,height,"€")}
"use strict";function drawPriceChart(t,e,n,r,a){queue().defer(d3.csv,t).await(function(t,i){loading+=1,progress(loading),t&&console.log(t);var o=e.substr(1);o.toString(),document.getElementById(o).innerHTML="<p>".concat(i[0].High," ").concat(a," </p>");var c=d3.max(i,function(t){return+t.High}),l=d3.min(i,function(t){return+t.High}),s=d3.min(i,function(t){return t.Date}),d=d3.max(i,function(t){return t.Date}),u=d3.time.scale().domain([new Date(s),new Date(d)]).range([10,n-41]),g=d3.svg.axis().scale(u),f=d3.scale.linear().domain([0,c-l]).range([0,r-10-marginBottom]);if(h){var m=h.select(e);m.exit().remove()}var h=d3.select(e).append("svg").attr("width",n).attr("height",r).style("background-color",bgcolor).append("g");d3.transition().duration(4500);h.selectAll("rect").data(i).enter().append("rect").attr("x",function(t,e){return n-n/i.length-e*((n-50)/i.length)}).attr("y",function(t){return r-marginBottom-f(t.High-l)}).attr("height",function(t){return f(t.High-l)}).attr("width",function(t){return n/i.length}).style("fill","white").append("svg:title").text(function(t){return"Date: ".concat(t.Date," Price: ").concat(t.High)}).append("g"),h.selectAll("rect").transition().duration(1500).style("fill",chartColor),h.selectAll("text").data(i).enter().append("text").text(function(t,e){return parseInt(l+.1*e*(c-l))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,e){return r-marginBottom-fontSize+parseInt(fontSize)-e*((r-marginBottom-fontSize)/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black");var p=r-marginBottom;return h.append("g").attr("class","x axis").attr("transform","translate(40,".concat(p,")")).call(g).selectAll("text").attr("y",0).attr("x",9).attr("dy",".35em").attr("transform","rotate(90)").attr("font-size",fontSize).style("text-anchor","start"),"loaded"})}
"use strict";function drawVarPriceChart(t,n,e,a,r){queue().defer(d3.csv,t).await(function(t,i){loading+=1,progress(loading),t&&console.log(t);var o=n.substr(1);o.toString(),document.getElementById(o).innerHTML="<p>".concat(i[0].Open," ").concat(r," </p>");var c=d3.max(i,function(t){return+t.High-t.Low}).toFixed(1),l=d3.min(i,function(t){return+t.High-t.Low}),s=d3.mean(i,function(t){return+t.High-t.Low}).toFixed(1),u=d3.min(i,function(t){return t.Date}),g=d3.max(i,function(t){return t.Date});document.getElementById("".concat(o,"-stat")).innerHTML='\n      <li class="list-group-item">Dates:</li>\n      <li class="list-group-item">'.concat(u," to ").concat(g,'</li>\n      <li class="list-group-item">Maximal change in price per day: </li>\n      <li class="list-group-item"> ').concat(c," ").concat(r,'</li>\n      <li class="list-group-item">Minimal change in price per day: </li>\n      <li class="list-group-item"> ').concat(l.toFixed(1)," ").concat(r,'</li>\n      <li class="list-group-item">Average Variability in Price:</li>\n      <li class="list-group-item"> ').concat(s," ").concat(r,"</li>\n      "),document.getElementById(o).innerHTML=" <p> Max: ".concat(c," Average: ").concat(s," ").concat(r," </p>");var d=d3.time.scale().domain([new Date(u),new Date(g)]).range([10,e-41]),m=d3.svg.axis().scale(d),f=d3.scale.linear().domain([0,c-l]).range([0,a-10-marginBottom]),p=d3.select(n).append("svg").attr("width",e).attr("height",a).style("background-color",bgcolor);p.selectAll("rect").data(i).enter().append("rect").attr("x",function(t,n){return e-e/i.length-n*((e-50)/i.length)}).attr("y",function(t){return a-marginBottom-f(t.High-t.Low)}).attr("height",function(t){return f(t.High-t.Low)}).attr("width",function(t){return e/i.length}).style("fill","white"),p.selectAll("rect").transition().duration(1500).style("fill",chartColor).transition().duration(3e3).style("fill",function(t){return t.High-t.Low>s?"orange":chartColor}),p.selectAll("text").data(i).enter().append("text").text(function(t,n){return parseInt(l+.1*n*(c-l))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,n){return a-marginBottom-n*((a-marginBottom-fontSize)/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black");var h=a-marginBottom;p.append("g").attr("class","x axis").attr("transform","translate(40,".concat(h,")")).call(m).selectAll("text").attr("y",0).attr("x",9).attr("dy",".35em").attr("transform","rotate(90)").attr("font-size",fontSize).style("text-anchor","start")})}
"use strict";function progress(e){return document.getElementById("progress").innerHTML="Loading data: ".concat((e/6*100).toFixed(0),"%"),document.getElementById("progress").style.width="".concat(e/6*100,"%"),6===e||0===e?(document.getElementById("progress-bar").style.display="none",document.getElementById("wrapper").style.display="block",document.getElementById("loader").style.display="none",document.getElementById("footer").style.display="block","loaded"):(document.getElementById("progress-bar").style.display="block",document.getElementById("wrapper").style.display="none",document.getElementById("loader").style.display="block",document.getElementById("footer").style.display="none","loading")}
"use strict";function drawChartsSelectMonths(a){6==loading&&(loading=0,drawCharts(setDateScope(a)))}function alldata(){6==loading&&(loading=0,drawCharts("2017-07-01"))}
"use strict";function setDateScope(t){var a=new Date;return a.setMonth(a.getMonth()-t),a.toISOString().slice(0,10)}function setDate(t,a){var e="&start_date=".concat(t),n="https://www.quandl.com/api/v3/datasets/BITSTAMP/USD.csv?api_key=fzanZC3297Jsid-E8vCF".concat(e),s="https://www.quandl.com/api/v3/datasets/GDAX/ETH_EUR.csv?api_key=fzanZC3297Jsid-E8vCF".concat(e),c="https://www.quandl.com/api/v3/datasets/GDAX/LTC_EUR.csv?api_key=fzanZC3297Jsid-E8vCF".concat(e);return"bitcoin"===a?n:"ether"===a?s:"litecoin"===a?c:void 0}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
