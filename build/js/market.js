"use strict";var gainOrLossChart=dc.pieChart("#gain-loss-chart"),fluctuationChart=dc.barChart("#fluctuation-chart"),dayOfWeekChart=dc.rowChart("#day-of-week-chart"),moveChart=dc.lineChart("#monthly-move-chart"),volumeChart=dc.barChart("#monthly-volume-chart"),monthlyBubbleChart=dc.bubbleChart("#yearly-bubble-chart"),width=340,height=300,Calculator={current:0,operator:"",button_value:0,equation:""};navigator.onLine||alert("This website need to be connected to internet in order to work properly"),d3.csv("https://www.quandl.com/api/v3/datasets/BCHARTS/COINBASEEUR.csv?api_key=fzanZC3297Jsid-E8vCF").then(function(e){document.getElementById("loader").style.display="none",document.getElementById("container").style.display="block",document.getElementById("footer").style.display="block";var t=d3.timeFormat("%Y-%m-%d"),n=d3.timeParse("%Y-%m-%d"),a=d3.format(".2f");e.forEach(function(e){e.dd=n(e.Date),e.month=d3.timeMonth(e.dd),e.Close=+e.Close,e.Open=+e.Open});var r=d3.min(e,function(e){return e.Date}),o=d3.max(e,function(e){return e.Date}),i=crossfilter(e),u=i.groupAll(),d=i.dimension(function(e){return e.dd.getMonth()+1==1?"Jan ":e.dd.getMonth()+1==2?"Feb":e.dd.getMonth()+1==3?"Mar":e.dd.getMonth()+1==4?"Apr":e.dd.getMonth()+1==5?"May":e.dd.getMonth()+1==6?"Jun":e.dd.getMonth()+1==7?"Jul":e.dd.getMonth()+1==8?"Aug":e.dd.getMonth()+1==9?"Sep":e.dd.getMonth()+1==10?"Oct":e.dd.getMonth()+1==11?"Nov":e.dd.getMonth()+1==12?"Dece":void 0}),l=d.group().reduce(function(e,t){return++e.count,e.absGain+=t.Close-t.Open,e.fluctuation+=Math.abs(t.Close-t.Open),e.sumIndex+=(t.Open+t.Close)/2,e.avgIndex=e.sumIndex/e.count,e.percentageGain=e.avgIndex?e.absGain/e.avgIndex*100:0,e.fluctuationPercentage=e.avgIndex?e.fluctuation/e.avgIndex*100:0,e},function(e,t){return--e.count,e.absGain-=t.Close-t.Open,e.fluctuation-=Math.abs(t.Close-t.Open),e.sumIndex-=(t.Open+t.Close)/2,e.avgIndex=e.count?e.sumIndex/e.count:0,e.percentageGain=e.avgIndex?e.absGain/e.avgIndex*100:0,e.fluctuationPercentage=e.avgIndex?e.fluctuation/e.avgIndex*100:0,e},function(){return{count:0,absGain:0,fluctuation:0,fluctuationPercentage:0,sumIndex:0,avgIndex:0,percentageGain:0}}),s=(i.dimension(function(e){return e.dd}),i.dimension(function(e){return e.month})),c=s.group().reduceSum(function(e){return Math.abs(e.Close-e.Open)}),h=s.group().reduceSum(function(e){return e["Volume (Currency)"]/1e8}),g=s.group().reduce(function(e,t){return++e.days,e.total+=(t.Open+t.Close)/2,e.avg=Math.round(e.total/e.days),e},function(e,t){return--e.days,e.total-=(t.Open+t.Close)/2,e.avg=e.days?Math.round(e.total/e.days):0,e},function(){return{days:0,total:0,avg:0}}),m=i.dimension(function(e){return e.Open>e.Close?"Loss":"Gain"}),f=m.group(),v=i.dimension(function(e){return Math.round((e.Close-e.Open)/e.Open*100)}),p=v.group(),y=i.dimension(function(e){var t=e.dd.getDay();return t+"."+["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][t]}),b=y.group();monthlyBubbleChart.width(width).height(height).transitionDuration(1500).margins({top:10,right:50,bottom:55,left:40}).dimension(d).group(l).colors(d3.schemeRdYlGn[9]).colorDomain([-500,500]).colorAccessor(function(e){return e.value.absGain}).keyAccessor(function(e){return e.value.absGain}).valueAccessor(function(e){return e.value.percentageGain}).radiusValueAccessor(function(e){return e.value.fluctuationPercentage}).maxBubbleRelativeSize(.3).x(d3.scaleLinear().domain([-2500,2500])).y(d3.scaleLinear().domain([-100,100])).r(d3.scaleLinear().domain([0,4e3])).elasticY(!0).elasticX(!0).yAxisPadding(100).xAxisPadding(500).renderHorizontalGridLines(!0).renderVerticalGridLines(!0).xAxisLabel("Crytpo Gain $").yAxisLabel("Crypto Gain %").renderLabel(!0).label(function(e){return e.key}).renderTitle(!0).title(function(e){return[e.key,"Index Gain: "+a(e.value.absGain),"Index Gain in Percentage: "+a(e.value.percentageGain)+"%","Fluctuation / Index Ratio: "+a(e.value.fluctuationPercentage)+"%"].join("\n")}).yAxis().tickFormat(function(e){return e+"%"}),gainOrLossChart.width(width).height(height).radius(80).dimension(m).group(f).label(function(e){if(gainOrLossChart.hasFilter()&&!gainOrLossChart.hasFilter(e.key))return e.key+"(0%)";var t=e.key;return u.value()&&(t+="("+Math.floor(e.value/u.value()*100)+"%)"),t}),dayOfWeekChart.width(width).height(height).margins({top:20,left:10,right:10,bottom:20}).group(b).dimension(y).ordinalColors(["#3182bd","#6baed6","#9ecae1","#c6dbef","#dadaeb"]).label(function(e){return e.key.split(".")[1]}).title(function(e){return e.value}).elasticX(!0).xAxis().ticks(4),fluctuationChart.width(width).height(height).margins({top:10,right:50,bottom:30,left:40}).dimension(v).group(p).elasticY(!0).centerBar(!0).gap(1).round(dc.round.floor).alwaysUseRounding(!0).x(d3.scaleLinear().domain([-25,25])).renderHorizontalGridLines(!0).filterPrinter(function(e){var t=e[0],n="";return n+=a(t[0])+"% -> "+a(t[1])+"%"}),fluctuationChart.xAxis().tickFormat(function(e){return e+"%"}),fluctuationChart.yAxis().ticks(5),moveChart.renderArea(!0).width(width).height(150).transitionDuration(1e3).margins({top:30,right:50,bottom:55,left:52}).dimension(s).mouseZoomable(!0).rangeChart(volumeChart).x(d3.scaleTime().domain([new Date(r),new Date(o)])).round(d3.timeMonth.round).xUnits(d3.timeMonths).elasticY(!0).renderHorizontalGridLines(!0).legend(dc.legend().x(800).y(10).itemHeight(13).gap(5)).brushOn(!1).group(g,"Monthly Index Average").valueAccessor(function(e){return e.value.avg}).stack(c,"Monthly Index Move",function(e){return e.value}).title(function(e){var n=e.value.avg?e.value.avg:e.value;return isNaN(n)&&(n=0),t(e.key)+"\n"+a(n)}),volumeChart.width(width).height(150).margins({top:0,right:50,bottom:55,left:40}).dimension(s).group(h).centerBar(!0).gap(1).x(d3.scaleTime().domain([new Date(r),new Date(o)])).round(d3.timeMonth.round).alwaysUseRounding(!0).xUnits(d3.timeMonths).yAxisLabel("Billions $"),dc.renderAll()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
