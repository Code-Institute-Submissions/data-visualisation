"use strict";var width=400,height=200,marginBottom=50,chartColor="rgb(66, 170, 143)",font="Didact Gothic",fontSize="10",bgcolor="white",setDate="2017-05-01",startDate="&start_date="+setDate,bitcoinPriceData="https://www.quandl.com/api/v3/datasets/BITSTAMP/USD.csv?api_key=fzanZC3297Jsid-E8vCF"+startDate,etherPriceData="https://www.quandl.com/api/v3/datasets/GDAX/ETH_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+startDate,litecoinPriceData="https://www.quandl.com/api/v3/datasets/GDAX/LTC_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+startDate;
"use strict";
"use strict";drawPriceChart(etherPriceData,"#ether",width,height,"Euro"),drawPriceChart(bitcoinPriceData,"#bitcoin",width,height,"$"),drawPriceChart(litecoinPriceData,"#litecoin",width,height,"Euro"),drawVarPriceChart(etherPriceData,"#ether-var",width,height,"Euro"),drawVarPriceChart(bitcoinPriceData,"#bitcoin-var",width,height,"$"),drawVarPriceChart(litecoinPriceData,"#litecoin-var",width,height,"Euro");
"use strict";function drawPriceChart(t,n,e,r,a){queue().defer(d3.csv,t).await(function(t,o){t&&console.log(t);var i,c,l,s,u=n.substr(1);u.toString(),document.getElementById(u).innerHTML="<p>".concat(o[0].Low," ").concat(a," </p>"),i=d3.max(o,function(t){return+t.High}),c=d3.min(o,function(t){return+t.High}),l=d3.min(o,function(t){return t.Date}),s=d3.max(o,function(t){return t.Date});var d=d3.time.scale().domain([new Date(l),new Date(s)]).range([10,e-41]),f=d3.svg.axis().scale(d),g=d3.scale.linear().domain([0,i-c]).range([0,r-10-marginBottom]),m=d3.select(n).append("svg").attr("width",e).attr("height",r).style("background-color",bgcolor);d3.transition().duration(4500);console.log(o.length),m.selectAll("rect").data(o).enter().append("rect").attr("x",function(t,n){return e-e/o.length-n*((e-50)/o.length)}).attr("y",function(t){return r-marginBottom-g(t.High-c)}).attr("height",function(t){return g(t.High-c)}).attr("width",function(t){return e/o.length}).style("fill","white").append("svg:title").text(function(t){return"Date: ".concat(t.Date," Price: ").concat(t.High)}).append("g"),m.selectAll("rect").transition().duration(1500).style("fill",chartColor),m.selectAll("text").data(o).enter().append("text").text(function(t,n){return parseInt(c+.1*n*(i-c))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,n){return r-marginBottom-fontSize+parseInt(fontSize)-n*((r-marginBottom-fontSize)/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black");var h=r-marginBottom;m.append("g").attr("class","x axis").attr("transform","translate(40,"+h+")").call(f).selectAll("text").attr("y",0).attr("x",9).attr("dy",".35em").attr("transform","rotate(90)").attr("font-size",fontSize).style("text-anchor","start")})}
"use strict";function drawVarPriceChart(t,n,e,r,a){queue().defer(d3.csv,t).await(function(t,o){t&&console.log(t);var i,c,l,u,d=n.substr(1);d.toString(),document.getElementById(d).innerHTML="<p>".concat(o[0].Open," ").concat(a," </p>"),i=d3.max(o,function(t){return+t.High-t.Low}),c=d3.min(o,function(t){return+t.High-t.Low});var s=d3.mean(o,function(t){return+t.High-t.Low});l=d3.min(o,function(t){return t.Date}),u=d3.max(o,function(t){return t.Date}),s=s.toFixed(0),i=i.toFixed(0),document.getElementById(d).innerHTML=" <p> Max: ".concat(i," Average: ").concat(s," ").concat(a," </p>");var f=d3.time.scale().domain([new Date(l),new Date(u)]).range([10,e-41]),g=d3.svg.axis().scale(f),m=d3.scale.linear().domain([0,i-c]).range([0,r-10-marginBottom]),h=d3.select(n).append("svg").attr("width",e).attr("height",r).style("background-color",bgcolor);h.selectAll("rect").data(o).enter().append("rect").attr("x",function(t,n){return e+0-e/o.length-n*((e-50)/o.length)}).attr("y",function(t){return r-marginBottom-m(t.High-t.Low)}).attr("height",function(t){return m(t.High-t.Low)}).attr("width",function(t){return e/o.length}).style("fill","white"),h.selectAll("rect").transition().duration(1500).style("fill",chartColor).transition().duration(3e3).style("fill",function(t){return t.High-t.Low>s?"orange":chartColor}),h.selectAll("text").data(o).enter().append("text").text(function(t,n){return parseInt(c+.1*n*(i-c))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,n){return r-marginBottom-n*((r-marginBottom-fontSize)/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black");var x=r-marginBottom;h.append("g").attr("class","x axis").attr("transform","translate(40,"+x+")").call(g).selectAll("text").attr("y",0).attr("x",9).attr("dy",".35em").attr("transform","rotate(90)").attr("font-size",fontSize).style("text-anchor","start")})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
