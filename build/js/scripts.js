"use strict";var width=300,height=200,chartColor="rgb(66, 170, 143)",font="Didact Gothic",fontSize="10",bgcolor="white",startDate="&start_date=2017-07-06",bitcoinPriceData="https://www.quandl.com/api/v3/datasets/GDAX/BTC_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+startDate,etherPriceData="https://www.quandl.com/api/v3/datasets/GDAX/ETH_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+startDate,litecoinPriceData="https://www.quandl.com/api/v3/datasets/GDAX/LTC_EUR.csv?api_key=fzanZC3297Jsid-E8vCF"+startDate;
"use strict";
"use strict";drawPriceChart(etherPriceData,"#ether",width,height),drawPriceChart(bitcoinPriceData,"#bitcoin",width,height),drawVarPriceChart(etherPriceData,"#ether-var",width,height),drawVarPriceChart(bitcoinPriceData,"#bitcoin-var",width,height),drawPriceChart(litecoinPriceData,"#litecoin",width,height),drawVarPriceChart(litecoinPriceData,"#litecoin-var",width,height);
"use strict";function drawPriceChart(t,n,e,r){queue().defer(d3.csv,t).await(function(t,a){var c,i,o=n.substr(1);o.toString(),document.getElementById(o).innerHTML="<p>".concat(a[0].Open," Euro </p>"),c=d3.max(a,function(t){return+t.Open}),i=d3.min(a,function(t){return+t.Open});var u=d3.scale.linear().domain([0,c-i]).range([0,r-10]),l=d3.select(n).append("svg").attr("width",e).attr("height",r).style("background-color",bgcolor);l.selectAll("rect").data(a).enter().append("rect").attr("x",function(t,n){return e-e/a.length-n*((e-50)/a.length)}).attr("y",function(t){return r-u(t.Open-i)}).attr("height",function(t){return u(t.Open-i)}).attr("width",function(t){return e/a.length}).style("fill",chartColor).append("svg:title").text(function(t){return"Date: ".concat(t.Date," Price: ").concat(t.Open)}),l.selectAll("text").data(a).enter().append("text").text(function(t,n){return parseInt(i+.1*n*(c-i))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,n){return r+parseInt(fontSize)-n*(r/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black")})}
"use strict";function drawVarPriceChart(t,e,n,r){queue().defer(d3.csv,t).await(function(t,a){var i,o,c=e.substr(1);c.toString(),i=d3.max(a,function(t){return+t.High-t.Open}),o=d3.min(a,function(t){return+t.High-t.Open}),i=i.toFixed(0),o=o.toFixed(0),document.getElementById(c).innerHTML=" <p> Max: ".concat(i," Average: ").concat((o+i)/2," </p>");var u=d3.scale.linear().domain([0,i-o]).range([0,r-10]),l=d3.select(e).append("svg").attr("width",n).attr("height",r).style("background-color",bgcolor);l.selectAll("rect").data(a).enter().append("rect").attr("x",function(t,e){return n+0-n/a.length-e*((n-50)/a.length)}).attr("y",function(t){return r-u(t.High-t.Low)}).attr("height",function(t){return u(t.High-t.Low)}).attr("width",function(t){return n/a.length}).style("fill",chartColor).append("svg:title").text(function(t){return"Date: ".concat(t.Date," Variability: ").concat(parseInt(t.High-t.Low)," Euro")}),l.selectAll("text").data(a).enter().append("text").text(function(t,e){return parseInt(o+.1*e*(i-o))}).attr("text-anchor","middle").attr("x",function(){return 20}).attr("y",function(t,e){return r+parseInt(fontSize)-e*(r/10)}).attr("font-family",font).attr("font-size",fontSize).attr("fill","black")})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
